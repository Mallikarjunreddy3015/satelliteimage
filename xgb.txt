X = data.iloc[:, 1:5]
y = data.iloc[:,0]
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)

import xgboost as xgb
from xgboost import XGBClassifier

model = XGBClassifier()
model.get_params()

model.fit(X_train, y_train)
y_pred = model.predict(X_test) 
from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test,y_pred) 
print("Accuracy: %.2f%%" % (accuracy * 100.0))


from sklearn.model_selection import RandomizedSearchCV
import xgboost
classifier = xgboost.XGBClassifier()
params={
 "learning_rate"    : [0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20,0.22,0.24,0.26,0.28,0.30 ] ,
 "max_depth"        : [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
 "min_child_weight" : [ 1, 3, 5, 7 ],
 "gamma"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],
 "colsample_bytree" : [ 0.3, 0.4, 0.5 , 0.7 ]
    
}

rs_model=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)
rs_model.fit(X,y)
rs_model.best_estimator_
rs_model.best_params_
from sklearn.model_selection import cross_val_score
score=cross_val_score(classifier,X,y,cv=10)
print("Accuracy: %.2f%%" % (score.mean()*100))
from sklearn.model_selection import GridSearchCV
grid = GridSearchCV(classifier, params, verbose=2)
grid.fit(X_train, y_train)
